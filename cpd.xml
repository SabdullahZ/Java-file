<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="177" tokens="462">
<file line="190" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/ParseState.java"/>
<file line="173" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/ParseState.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * Get the current context.
     *
     * @return The current context.
     */
    public Context getContext() {
	return context;
    }

    /**
     * Get the current classifier.
     *
     * @return The current classifier.
     */
    public Object getClassifier() {
	return classifier;
    }

    /**
     * Tell the parse state that an anonymous class is being parsed.
     *
     * @return The name of the anonymous class.
     */
    public String anonymousClass() {
	classnamePrefix =
	    classnamePrefix.substring(0, classnamePrefix.indexOf("$") + 1);
	anonymousClassCounter++;
	return (Integer.valueOf(anonymousClassCounter)).toString();
    }

    /**
     * Tell the parse state that an outer class is being parsed.
     */
    public void outerClassifier() {
	classnamePrefix = "";
	anonymousClassCounter = 0;
    }

    /**
     * Get the current classname prefix.
     *
     * @return The current classname prefix.
     */
    public String getClassnamePrefix() {
	return classnamePrefix;
    }

    /**
     * Tell the parse state that a classifier is an inner classifier
     * to the current parsed classifier.
     *
     * @param mClassifier The inner classifier.
     */
    public void innerClassifier(Object mClassifier) {
	obsoleteInnerClasses.remove(mClassifier);
    }

    /**
     * Remove features no longer in the source from the current
     * classifier in the model.
     */
    public void removeObsoleteFeatures() {
    	if (obsoleteFeatures == null) {
            return;
        }
        for (Object feature : obsoleteFeatures) {
            Model.getCoreHelper().removeFeature(classifier, feature);
            Model.getUmlFactory().delete(feature);
    	}
    }

    /**
     * Remove inner classes no longer in the source from the current
     * classifier in the model.
     */
    public void removeObsoleteInnerClasses() {
    	if (obsoleteInnerClasses == null) {
	    return;
	}
	for (Object element : obsoleteInnerClasses) {
	    if (Model.getFacade().isAClassifier(element)) {
		Model.getUmlFactory().delete(element);
	    }
	}
    }

    /**
     * Tell the parse state that a feature belongs to the current
     * classifier.
     *
     * @param feature The feature.
     */
    public void feature(Object feature) {
	obsoleteFeatures.remove(feature);
    }

    /**
     * Get a feature from the current classifier not yet modeled.
     *
     * @param name The name of the feature.
     * @return The found feature, null if not found.
     */
    public Object getFeature(String name) {
        for (Object mFeature : obsoleteFeatures) {
	    if (name.equals(Model.getFacade().getName(mFeature))) {
		return mFeature;
	    }
	}
	return null;
    }

    /**
     * Get a features from the current classifier not yet modeled.
     *
     * @param name The name of the feature.
     * @return The collection of found features
     */
    public Collection getFeatures(String name) {
    	ArrayList list = new ArrayList();
    	for (Object mFeature : obsoleteFeatures) {
	    if (name.equals(Model.getFacade().getName(mFeature))) {
		list.add(mFeature);
	    }
	}
	return list;
    }

    /**
     * Get a method from the current classifier not yet modeled.
     *
     * @param name The name of the method.
     * @return The found method, null if not found.
     */
    public Object getMethod(String name) {
        for (Object mFeature : obsoleteFeatures) {
	    if (Model.getFacade().isAMethod(mFeature)
		&& name.equals(Model.getFacade().getName(mFeature))) {
		return mFeature;
	    }
	}
	return null;
    }

    /**
     * Get a operation from the current classifier not yet modeled.
     *
     * @param name The name of the operation.
     * @return The found operation, null if not found.
     */
    public Object getOperation(String name) {
        for (Object feature : obsoleteFeatures) {
	    if (Model.getFacade().isAOperation(feature)
                    && name.equals(Model.getFacade().getName(feature))) {
		return feature;
	    }
	}
	return null;
    }

    /**
     * Get a attribute from the current classifier not yet modeled.
     *
     * @param name The name of the attribute.
     * @return The found attribute, null if not found.
     */
    public Object getAttribute(String name) {
        for (Object feature : obsoleteFeatures) {
            if (Model.getFacade().isAAttribute(feature)
                    && name.equals(Model.getFacade().getName(feature))) {
                return feature;
            }
        }
        return null;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="63" tokens="177">
<file line="104" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/ParseState.java"/>
<file line="103" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/ParseState.java"/>
<codefragment>
<![CDATA[
    public ParseState(Object model, Object javaLangPackage) {
	obsoleteInnerClasses = new ArrayList();
	classifier = null;
	context =
	    new PackageContext(new PackageContext(null, model),
				   javaLangPackage);
	anonymousClassCounter = 0;
    }

    /**
     * Create a new parse state based on another parse state.
     *
     * @param previousState The base parse state.
     * @param mClassifier The new classifier being parsed.
     * @param currentPackage The current package being parsed.
     */
    public ParseState(ParseState previousState,
                      Object mClassifier,
                      Object currentPackage) {

        LOG.info("Parsing the state of " + mClassifier);

        classnamePrefix =
            previousState.classnamePrefix
            + Model.getFacade().getName(mClassifier)
            + "$";
        obsoleteFeatures =
            new ArrayList(Model.getFacade().getFeatures(mClassifier));
        obsoleteInnerClasses =
            new ArrayList(Model.getFacade().getOwnedElements(mClassifier));
        context =
            new OuterClassifierContext(
                    previousState.context,
                    mClassifier,
                    currentPackage,
                    classnamePrefix);
        classifier = mClassifier;
        anonymousClassCounter = previousState.anonymousClassCounter;
    }

    /**
     * Add a package to the current context.
     *
     * @param mPackage The package to add.
     */
    public void addPackageContext(Object mPackage) {
	context = new PackageContext(context, mPackage);
    }

    /**
     * Add a classifier to the current context.
     *
     * @param mClassifier The classifier to add.
     */
    public void addClassifierContext(Object mClassifier) {
	context = new ClassifierContext(context, mClassifier);
    }

    /**
     * @param c the source file being parsed
     * @deprecated since 0.30.2
     */
    public void addComponent(Object c) {
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="136">
<file line="761" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/ParserUtils.java"/>
<file line="891" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/ParserUtils.java"/>
<codefragment>
<![CDATA[
        public ClassSignatureLexer(String desc) {
            super(desc);
        }

        /**
         * Parse class signature according the grammar:
         * 
         * <pre>
         * ClassSignature: FormalTypeParametersopt SuperclassSignature SuperinterfaceSignature*
         * FormalTypeParameters: &lt;FormalTypeParameter+&gt;
         * FormalTypeParameter: Identifier ClassBound InterfaceBound*
         * ClassBound:  : FieldTypeSignatureopt
         * InterfaceBound:  : FieldTypeSignature
         * SuperclassSignature:   ClassTypeSignature
         * SuperinterfaceSignature:  ClassTypeSignature
         * </pre>
         * 
         * @return a List of matched Token.
         */
        @Override
        public List<Token> parse() {
            List<Token> result = new LinkedList<Token>();

            if (desc.charAt(0) == '<') {
                result.add(new Token(Token.LABRACKET, "<"));
                int formalTypeParametersEndIndex = balancedBracketPosition(
                        desc, '<', '>');
                String formalTypeParameters = desc.substring(1,
                        formalTypeParametersEndIndex);
                desc = desc.substring(formalTypeParametersEndIndex + 1);
                FormalTypeParameterLexer l = new FormalTypeParameterLexer(
                        formalTypeParameters);
                result.addAll(l.parse());
                Pattern.compile("([^:]*):((.*))").matcher(formalTypeParameters);
                result.add(new Token(Token.RABRACKET, ">"));
            }
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="115">
<file line="116" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/OuterClassifierContext.java"/>
<file line="106" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/OuterClassifierContext.java"/>
<codefragment>
<![CDATA[
            Class classifier;
            String clazzName = namePrefix + name;
            // Special case for model
            if (!Model.getFacade().isAModel(mPackage)) {
                clazzName = packageJavaName + "." + namePrefix + name;
            }
            classifier = findClass(clazzName, interfacesOnly);
            if (classifier != null) {
                if (classifier.isInterface()) {
                    iClassifier = Model.getCoreFactory().buildInterface(name,
                            mClassifier);
                } else {
                    iClassifier = Model.getCoreFactory().buildClass(name,
                            mClassifier);
                }
            }
        }
        if (iClassifier == null && getContext() != null) {
            // Continue the search through the rest of the model
            iClassifier = getContext().get(name, interfacesOnly, profile);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="111">
<file line="136" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/Context.java"/>
<file line="165" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/Context.java"/>
<codefragment>
<![CDATA[
    }

    private Class<?> findClassOnUserClasspath(String name,
            boolean interfacesOnly) {
        Class<?> clazz = null;
        try {
            clazz = ImportClassLoader.getInstance().loadClass(name);
        } catch (MalformedURLException e) {
            // TODO: Need to make this visible to the user
            LOG.log(Level.WARNING, "Classpath configuration error", e);
        } catch (ClassNotFoundException e) {
            return null;
        } catch (LinkageError e) {
            // We found the class, but we couldn't load it for some reason
            // most likely a missing dependency on the class path
            // TODO: Need to make this visible to the user
            LOG.log(Level.WARNING,
                    "Linkage error loading found class " + name, e);
            return null;
        }
        if (clazz != null && interfacesOnly && !clazz.isInterface()) {
            return null;
        }
        return clazz;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="109">
<file line="99" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/Context.java"/>
<file line="113" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/Context.java"/>
<codefragment>
<![CDATA[
        Object parent = Model.getFacade().getNamespace(mPackage);
        if (Model.getFacade().isAModel(parent)) {
            return Model.getFacade().getName(mPackage);
        } else if (parent != null) {
            return getJavaName(parent) + "."
                    + Model.getFacade().getName(mPackage);
        } else {
            return "";
        }
    }

    /**
     * @param c The context to set.
     */
    protected void setContext(Context c) {
        this.context = c;
    }

    /**
     * @return Returns the context.
     */
    protected Context getContext() {
        return context;
    }

    protected Class<?> findClass(String name, boolean interfacesOnly) {
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="102">
<file line="142" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/PackageContext.java"/>
<file line="149" path="/var/jenkins_home/workspace/organization_argouml-java_master/src/org/argouml/language/java/reveng/classfile/PackageContext.java"/>
<codefragment>
<![CDATA[
                }
            }
        }
        if (mClassifier == null) {
            throw new ClassifierNotFoundException(name);
        }

        return mClassifier;
    }

    // Historically this used the value "yes", but all existing
    // code only checks for the presence of the tag, not its value
    private static final String GENERATED_TAG_VALUE = "true";

    /**
     * Set the tagged value which indicates this element was generated as a
     * result of reverse engineering.
     * 
     * @param element the ModelElement to set the tag on
     */
    private void setGeneratedTag(Object element) {
        Object tv = Model.getFacade().getTaggedValue(element,
                Facade.GENERATED_TAG);
        if (tv == null) {
            Model.getExtensionMechanismsHelper().addTaggedValue(
                    element,
                    Model.getExtensionMechanismsFactory().buildTaggedValue(
                            Facade.GENERATED_TAG, GENERATED_TAG_VALUE));
        } else {
            Model.getExtensionMechanismsHelper().setValueOfTag(tv,
                    GENERATED_TAG_VALUE);
        }
    }
}
]]>
</codefragment>
</duplication>
</pmd-cpd>